# -*- coding: utf-8 -*-
"""Colorization_CNN_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJzPG8UQubZl6II671zAIuq0aH526pYI

the images for this are available at 
https://drive.google.com/open?id=1_gxVdFLl5jPFb4uba2Tccj4Tdq6qvkR7
The additional 60,000 images from wiki are here:
https://drive.google.com/open?id=1iaR9oGS-rPbake-lCkD43OkM8YmlWCCx

Sample code for this CNN was taken from 
https://github.com/nikhitmago/deep-cnn-for-image-colorization/blob/master/(Deep)%20CNNs%20for%20Image%20Colorization.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
#loading images as a list 
from PIL import Image
from numpy import asarray
from os import listdir
from matplotlib import image
import os
from PIL import Image
import os
from skimage import io
from skimage.transform import resize
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import keras
from keras.models import Sequential
from keras.layers import Dropout, MaxPooling2D, Conv2D, Dense, Flatten,BatchNormalization, UpSampling2D
from keras import optimizers
from skimage.color import rgb2grey
# %matplotlib inline
from io import BytesIO

"""### Uploading Images as a list"""

from google.colab import files

color = files.upload()
color_images = color
file_name = [f for f in color_images.keys()]

color = list()
for name in file_name:
# load image
    color_data = np.array(Image.open(BytesIO(color_images[name])))
# store loaded image
    color.append(color_data)

len(color)

bw_images = files.upload()

file_name2 = [f for f in bw_images.keys()]

bw = list()
for name in file_name2:
# load image
    bw_data = np.array(Image.open(BytesIO(bw_images[name])))
# store loaded image
    bw.append(bw_data)

plt.imshow(bw[1300], cmap='gray')

plt.imshow(color[1300])

"""### Converting Image Lists to Arrays"""

bw = np.array(bw).astype('float32')/255
color = np.array(color).astype('float32')/255

bw.shape

color.shape

bw = bw.reshape(2786, 200, 200,1)
color = color.reshape(2786, 200, 200,3)

print('Black and White Shape',bw.shape)
print('Color Shape',color.shape)

(200/2786)*100

X_train = bw[0:-200]/255
X_test = bw[-200:]/255

y_train = color[0:-200]
y_test = color[-200:]

#model
cnn = Sequential()
cnn.add(Conv2D(34, kernel_size = (20,20), strides=(1, 1),activation='relu', padding='same', input_shape = (200,200,1)))
cnn.add(Conv2D(64, kernel_size = (5,5), strides=(1, 1),activation='relu' , padding='same'))
cnn.add(Conv2D(128, kernel_size = (3,3), strides=(1, 1),activation='relu' ,padding='same'))
cnn.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1), padding='same'))
cnn.add(Conv2D(384, kernel_size = (3,3), strides=(1, 1),activation='relu' , padding='same'))
cnn.add(Conv2D(128, kernel_size = (3,3), strides=(1, 1),activation='relu' ,padding='same'))
cnn.add(Conv2D(64, kernel_size = (5,5), strides=(1, 1),activation='relu', padding='same'))
cnn.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1), padding='same'))
cnn.add(Conv2D(34, kernel_size = (3,3), strides=(1, 1),activation='relu' ,padding='same'))
cnn.add(MaxPooling2D(pool_size=(2, 2), strides=(1, 1), padding='same'))
cnn.add(Dense(64,input_shape=(3,), activation='relu'))
cnn.add(Dense(3,input_shape=(3,), activation='relu'))
cnn.summary()

cnn.compile(loss='categorical_crossentropy', optimizer='Adam', metrics = ['accuracy', 'mse'])
history = cnn.fit(X_train, y_train, epochs=100, validation_split=0.15)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Train vs Validation Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()

predictions = cnn.predict(X_test)

predictions.shape

predictions[0].dtype

plt.imshow(y_test[0])

plt.imshow(predictions[0])

plt.imshow(X_test[0].reshape(200,200), cmap='gray')

ashish = files.upload()

file_name3 = [f for f in ashish.keys()]
for name in file_name3:
# load image
    ashish_bw = np.array(Image.open(BytesIO(ashish[name])))

ashish_bw

plt.imshow(ashish_bw,cmap='gray')

ashish_bw = ashish_bw.astype('float32')/255
ashish_bw = ashish_bw.reshape(1,200, 200,1)

ashish_bw.shape

ashish_predict = cnn.predict(ashish_bw)

ashish_predict.shape

plt.imshow(ashish_predict[0])

ashish_save = Image.fromarray(ashish_predict[0], 'RGB')
ashish_save.save('ashish_save.jpg')

files.download('ashish_save.jpg')

